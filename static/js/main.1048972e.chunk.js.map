{"version":3,"sources":["todo/fetch.ts","todo/store.ts","components/Controller.tsx","components/Log.tsx","components/TodoList.tsx","components/Main.tsx","components/App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["url","process","createHeaders","jwt","headers","Authorization","catchError","error","status","message","response","data","isSuccess","getTodos","a","axios","get","res","log","postTodo","post","deleteTodo","id","delete","putTodo","put","todosState","atom","key","default","logsState","jwtState","selectedTodoState","title","description","completed","created_at","updated_at","Controller","classes","useStyles","setTodos","useSetRecoilState","setLogs","useRecoilState","setJwt","selectedTodo","setSelectedTodo","resetSelectedTodo","useResetRecoilState","useState","postData","setPostData","getTodosHandler","prev","postTodoHandler","putTodoHandler","putData","className","sScrollContainer","sContainer","Typography","header","variant","TextField","label","multiline","fullWidth","value","onChange","e","target","Divider","divider","Button","button","color","onClick","sTtileLine","FormControlLabel","control","Checkbox","name","checked","desc","disabled","InputProps","startAdornment","InputAdornment","position","makeStyles","theme","createStyles","palette","primary","main","marginTop","spacing","margin","backgroundColor","secondary","dark","css","Log","logs","useRecoilValue","createIcon","useCallback","Avatar","aria-label","avatarSuccess","avatarError","map","i","Card","cardContainer","CardHeader","cardHeader","avatar","subheader","width","padding","height","red","green","TodoList","todos","deleteTodoHandler","firstChar","slice","style","avatarComplete","avatarIncomplete","todo","IconButton","selectTodoHandler","action","Date","toLocaleString","CardContent","cardcontent","component","grey","paddingTop","Main","Grid","container","gridContainer","item","gridItem","xs","sm","dividerVContainer","dividerV","orientation","dividerHContainer","dividerH","sRightContainer","sListContainer","breakpoints","down","display","up","App","createTheme","colors","orange","type","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.1048972e.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { LogType, RequestTodoType, TodoType } from './types';\r\n\r\nconst url = process.env.REACT_APP_API_URL!;\r\n\r\nconst createHeaders = (jwt: string) => {\r\n\treturn {\r\n\t\theaders: { Authorization: `Bearer ${jwt}` }\r\n\t};\r\n};\r\n\r\nconst catchError = (error: any): LogType => {\r\n\tlet status = 500;\r\n\tlet message = 'Internal Server Error';\r\n\tif (error.response && error.response.data) {\r\n\t\tstatus = error.response.status;\r\n\t\tmessage = error.response.data.error;\r\n\t}\r\n\treturn { status, message, isSuccess: false };\r\n};\r\n\r\n/**\r\n * Todo一覧を取得する\r\n * @param jwt JsonWebToken\r\n * @returns Todo一覧とログ\r\n */\r\nexport const getTodos = async (jwt: string) => {\r\n\ttry {\r\n\t\tconst res = await axios.get(url, createHeaders(jwt));\r\n\t\tconst data = res.data as TodoType[];\r\n\t\treturn {\r\n\t\t\tdata,\r\n\t\t\tlog: { status: res.status, message: 'success get request', isSuccess: true } as LogType\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn { data: [] as TodoType[], log: catchError(error) };\r\n\t}\r\n};\r\n\r\n/**\r\n * Todoを投稿する\r\n * @param jwt JsonWebToken\r\n * @param data 投稿するデータ\r\n * @returns ログ\r\n */\r\nexport const postTodo = async (jwt: string, data: RequestTodoType) => {\r\n\ttry {\r\n\t\tconst res = await axios.post(url, data, createHeaders(jwt));\r\n\t\treturn { log: { status: res.status, message: res.data.message, isSuccess: true } as LogType };\r\n\t} catch (error) {\r\n\t\treturn { log: catchError(error) };\r\n\t}\r\n};\r\n\r\n/**\r\n * Todoを削除する\r\n * @param jwt JsonWebToken\r\n * @param id Todoのid\r\n * @returns ログ\r\n */\r\nexport const deleteTodo = async (jwt: string, id: string) => {\r\n\ttry {\r\n\t\tconst res = await axios.delete(url + `/${id}`, createHeaders(jwt));\r\n\t\treturn { log: { status: res.status, message: res.data.message, isSuccess: true } as LogType };\r\n\t} catch (error) {\r\n\t\treturn { log: catchError(error) };\r\n\t}\r\n};\r\n\r\n/**\r\n * Todoを更新する\r\n * @param jwt JsonWebToken\r\n * @param id Todoのid\r\n * @param data 更新するデータ\r\n * @returns ログ\r\n */\r\nexport const putTodo = async (jwt: string, id: string, data: RequestTodoType) => {\r\n\ttry {\r\n\t\tconst res = await axios.put(url + `/${id}`, data, createHeaders(jwt));\r\n\t\treturn { log: { status: res.status, message: res.data.message, isSuccess: true } as LogType };\r\n\t} catch (error) {\r\n\t\treturn { log: catchError(error) };\r\n\t}\r\n};\r\n","import { atom } from 'recoil';\r\nimport { LogType, TodoType } from './types';\r\n\r\nexport const todosState = atom({\r\n\tkey: 'state/todos',\r\n\tdefault: [] as TodoType[]\r\n});\r\n\r\nexport const logsState = atom({\r\n\tkey: 'state/logs',\r\n\tdefault: [] as LogType[]\r\n});\r\n\r\nexport const jwtState = atom({\r\n\tkey: 'state/jwt',\r\n\tdefault: ''\r\n});\r\n\r\nexport const selectedTodoState = atom<TodoType>({\r\n\tkey: 'state/selectedTodo',\r\n\tdefault: {\r\n\t\tid: '',\r\n\t\ttitle: '',\r\n\t\tdescription: '',\r\n\t\tcompleted: false,\r\n\t\tcreated_at: '',\r\n\t\tupdated_at: ''\r\n\t}\r\n});\r\n","import React, { useState } from 'react';\r\nimport { useRecoilState, useResetRecoilState, useSetRecoilState } from 'recoil';\r\nimport { css } from '@emotion/css';\r\nimport {\r\n\tButton, Checkbox, createStyles, Divider, FormControlLabel, InputAdornment, makeStyles, TextField,\r\n\tTheme, Typography\r\n} from '@material-ui/core';\r\nimport { getTodos, postTodo, putTodo } from '../todo/fetch';\r\nimport { jwtState, logsState, selectedTodoState, todosState } from '../todo/store';\r\nimport { RequestTodoType } from '../todo/types';\r\n\r\nexport const Controller: React.FC = () => {\r\n\tconst classes = useStyles();\r\n\tconst setTodos = useSetRecoilState(todosState);\r\n\tconst setLogs = useSetRecoilState(logsState);\r\n\tconst [jwt, setJwt] = useRecoilState(jwtState);\r\n\tconst [selectedTodo, setSelectedTodo] = useRecoilState(selectedTodoState);\r\n\tconst resetSelectedTodo = useResetRecoilState(selectedTodoState);\r\n\tconst [postData, setPostData] = useState<RequestTodoType>({\r\n\t\ttitle: '',\r\n\t\tdescription: '',\r\n\t\tcompleted: false\r\n\t});\r\n\r\n\tconst getTodosHandler = async () => {\r\n\t\tconst res = await getTodos(jwt);\r\n\t\tsetTodos(res.data);\r\n\t\tsetLogs(prev => [res.log, ...prev]);\r\n\t};\r\n\r\n\tconst postTodoHandler = async () => {\r\n\t\tconst res = await postTodo(jwt, postData);\r\n\t\tsetLogs(prev => [res.log, ...prev]);\r\n\r\n\t\tif (res.log.isSuccess) {\r\n\t\t\t// 投稿に成功したら表示を初期状態に戻す\r\n\t\t\tsetPostData({ title: '', description: '', completed: false });\r\n\t\t\t// リストを更新する\r\n\t\t\tawait getTodosHandler();\r\n\t\t}\r\n\t};\r\n\r\n\tconst putTodoHandler = async () => {\r\n\t\tconst putData = {\r\n\t\t\ttitle: selectedTodo.title,\r\n\t\t\tdescription: selectedTodo.description,\r\n\t\t\tcompleted: selectedTodo.completed\r\n\t\t} as RequestTodoType;\r\n\t\tconst res = await putTodo(jwt, selectedTodo.id, putData);\r\n\t\tsetLogs(prev => [res.log, ...prev]);\r\n\r\n\t\tif (res.log.isSuccess) {\r\n\t\t\t// 更新に成功したら表示を初期状態に戻す\r\n\t\t\tresetSelectedTodo();\r\n\t\t\t// リストを更新する\r\n\t\t\tawait getTodosHandler();\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={sScrollContainer}>\r\n\t\t\t<div className={sContainer}>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Typography className={classes.header} variant=\"h5\">\r\n\t\t\t\t\t\tSpecify JWT\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<TextField\r\n\t\t\t\t\t\tclassName={classes.jwt}\r\n\t\t\t\t\t\tid=\"jwt\"\r\n\t\t\t\t\t\tlabel=\"JWT\"\r\n\t\t\t\t\t\tmultiline\r\n\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\tvalue={jwt}\r\n\t\t\t\t\t\tonChange={e => {\r\n\t\t\t\t\t\t\tsetJwt(e.target.value);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<Divider className={classes.divider} />\r\n\r\n\t\t\t\t{/* get */}\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Typography className={classes.header} variant=\"h5\">\r\n\t\t\t\t\t\tGet Todos\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tclassName={classes.button}\r\n\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\tonClick={getTodosHandler}>\r\n\t\t\t\t\t\tGET\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<Divider className={classes.divider} />\r\n\r\n\t\t\t\t{/* post */}\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className={sTtileLine}>\r\n\t\t\t\t\t\t<Typography className={classes.header} variant=\"h5\">\r\n\t\t\t\t\t\t\tPost Todo\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<span />\r\n\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\tcontrol={\r\n\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\tname=\"complited\"\r\n\t\t\t\t\t\t\t\t\tchecked={postData.completed}\r\n\t\t\t\t\t\t\t\t\tonChange={e => setPostData(prev => ({ ...prev, completed: e.target.checked }))}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlabel=\"Complited\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<TextField\r\n\t\t\t\t\t\tclassName={classes.title}\r\n\t\t\t\t\t\tid=\"title_post\"\r\n\t\t\t\t\t\tlabel=\"Title\"\r\n\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\tvalue={postData.title}\r\n\t\t\t\t\t\tonChange={e => {\r\n\t\t\t\t\t\t\tsetPostData(prev => ({ ...prev, title: e.target.value }));\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<TextField\r\n\t\t\t\t\t\tclassName={classes.desc}\r\n\t\t\t\t\t\tid=\"desc_post\"\r\n\t\t\t\t\t\tlabel=\"Description\"\r\n\t\t\t\t\t\tmultiline\r\n\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\tvalue={postData.description}\r\n\t\t\t\t\t\tonChange={e => {\r\n\t\t\t\t\t\t\tsetPostData(prev => ({ ...prev, description: e.target.value }));\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tclassName={classes.button}\r\n\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\tdisabled={!postData.title}\r\n\t\t\t\t\t\tonClick={postTodoHandler}>\r\n\t\t\t\t\t\tPOST\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<Divider className={classes.divider} />\r\n\r\n\t\t\t\t{/* put */}\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className={sTtileLine}>\r\n\t\t\t\t\t\t<Typography className={classes.header} variant=\"h5\">\r\n\t\t\t\t\t\t\tPut Todo\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tid=\"id\"\r\n\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\tdisabled\r\n\t\t\t\t\t\t\tvalue={selectedTodo.id}\r\n\t\t\t\t\t\t\tInputProps={{\r\n\t\t\t\t\t\t\t\tstartAdornment: <InputAdornment position=\"start\">ID</InputAdornment>\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\tcontrol={\r\n\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\tname=\"complited\"\r\n\t\t\t\t\t\t\t\t\tchecked={selectedTodo.completed}\r\n\t\t\t\t\t\t\t\t\tonChange={e => {\r\n\t\t\t\t\t\t\t\t\t\tsetSelectedTodo(prev => ({ ...prev, completed: e.target.checked }));\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlabel=\"Complited\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<TextField\r\n\t\t\t\t\t\tclassName={classes.title}\r\n\t\t\t\t\t\tid=\"title_put\"\r\n\t\t\t\t\t\tlabel=\"Title\"\r\n\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\tvalue={selectedTodo.title}\r\n\t\t\t\t\t\tonChange={e => {\r\n\t\t\t\t\t\t\tsetSelectedTodo(prev => ({ ...prev, title: e.target.value }));\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<TextField\r\n\t\t\t\t\t\tclassName={classes.desc}\r\n\t\t\t\t\t\tid=\"desc_put\"\r\n\t\t\t\t\t\tlabel=\"Description\"\r\n\t\t\t\t\t\tmultiline\r\n\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\tvalue={selectedTodo.description}\r\n\t\t\t\t\t\tonChange={e => {\r\n\t\t\t\t\t\t\tsetSelectedTodo(prev => ({ ...prev, description: e.target.value }));\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tclassName={classes.button}\r\n\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\tdisabled={!selectedTodo.title || !selectedTodo.id}\r\n\t\t\t\t\t\tonClick={putTodoHandler}>\r\n\t\t\t\t\t\tPUT\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n// ===================================================\r\n// Style\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\theader: {\r\n\t\t\tcolor: theme.palette.primary.main\r\n\t\t},\r\n\t\tjwt: {\r\n\t\t\tmarginTop: theme.spacing(2)\r\n\t\t},\r\n\t\ttitle: {\r\n\t\t\tmarginTop: theme.spacing(2)\r\n\t\t},\r\n\t\tdesc: {\r\n\t\t\tmarginTop: theme.spacing(2)\r\n\t\t},\r\n\t\tid: {\r\n\t\t\tmarginTop: theme.spacing(2)\r\n\t\t},\r\n\t\tbutton: {\r\n\t\t\tmarginTop: theme.spacing(2)\r\n\t\t},\r\n\t\tdivider: {\r\n\t\t\tmargin: theme.spacing(3, 0, 2),\r\n\t\t\tbackgroundColor: theme.palette.secondary.dark\r\n\t\t}\r\n\t})\r\n);\r\n\r\nconst sScrollContainer = css`\r\n\twidth: 100%;\r\n\theight: calc(100vh - 50px);\r\n\toverflow: auto;\r\n\tpadding-right: 5px;\r\n`;\r\n\r\nconst sContainer = css`\r\n\tdisplay: grid;\r\n\tgrid-template-rows: auto auto auto auto 1fr auto 1fr;\r\n`;\r\n\r\nconst sTtileLine = css`\r\n\tdisplay: grid;\r\n\tgrid-template-columns: auto 1fr auto;\r\n\tgrid-gap: 20px;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n`;\r\n","import React, { useCallback } from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { css } from '@emotion/css';\r\nimport { Avatar, Card, CardHeader, createStyles, makeStyles, Theme } from '@material-ui/core';\r\nimport { green, red } from '@material-ui/core/colors';\r\nimport { logsState } from '../todo/store';\r\n\r\nexport const Log: React.FC = () => {\r\n\tconst classes = useStyles();\r\n\tconst logs = useRecoilValue(logsState);\r\n\r\n\t/** ログの状態によってアイコンを変更する */\r\n\tconst createIcon = useCallback(\r\n\t\t(isSuccess: boolean) => {\r\n\t\t\treturn isSuccess ? (\r\n\t\t\t\t<Avatar aria-label=\"recipe\" className={classes.avatarSuccess}>\r\n\t\t\t\t\t!\r\n\t\t\t\t</Avatar>\r\n\t\t\t) : (\r\n\t\t\t\t<Avatar aria-label=\"recipe\" className={classes.avatarError}>\r\n\t\t\t\t\tX\r\n\t\t\t\t</Avatar>\r\n\t\t\t);\r\n\t\t},\r\n\t\t[classes.avatarError, classes.avatarSuccess]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className={sScrollContainer}>\r\n\t\t\t<div className={sContainer}>\r\n\t\t\t\t{logs.map((log, i) => (\r\n\t\t\t\t\t<Card key={i} className={classes.cardContainer}>\r\n\t\t\t\t\t\t<CardHeader\r\n\t\t\t\t\t\t\tclassName={classes.cardHeader}\r\n\t\t\t\t\t\t\tavatar={createIcon(log.isSuccess)}\r\n\t\t\t\t\t\t\ttitle={log.message}\r\n\t\t\t\t\t\t\tsubheader={log.status}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n// ===================================================\r\n// Style\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tcardContainer: {\r\n\t\t\twidth: '100%',\r\n\t\t\tpadding: theme.spacing(1)\r\n\t\t},\r\n\t\tcardHeader: {\r\n\t\t\tpadding: 0\r\n\t\t},\r\n\t\tavatarError: {\r\n\t\t\twidth: theme.spacing(4),\r\n\t\t\theight: theme.spacing(4),\r\n\t\t\tbackgroundColor: red[500]\r\n\t\t},\r\n\t\tavatarSuccess: {\r\n\t\t\twidth: theme.spacing(4),\r\n\t\t\theight: theme.spacing(4),\r\n\t\t\tbackgroundColor: green[600]\r\n\t\t}\r\n\t})\r\n);\r\n\r\nconst sContainer = css`\r\n\tdisplay: grid;\r\n\tgrid-gap: 10px;\r\n`;\r\n\r\nconst sScrollContainer = css`\r\n\twidth: 100%;\r\n\theight: 250px;\r\n\toverflow: auto;\r\n\tpadding-right: 5px;\r\n`;\r\n","import React, { useCallback } from 'react';\r\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport { css } from '@emotion/css';\r\nimport {\r\n\tAvatar, Card, CardContent, CardHeader, createStyles, IconButton, makeStyles, Theme, Typography\r\n} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { deleteTodo, getTodos } from '../todo/fetch';\r\nimport { jwtState, logsState, selectedTodoState, todosState } from '../todo/store';\r\nimport { TodoType } from '../todo/types';\r\n\r\nexport const TodoList: React.FC = () => {\r\n\tconst classes = useStyles();\r\n\tconst [todos, setTodos] = useRecoilState(todosState);\r\n\tconst setLogs = useSetRecoilState(logsState);\r\n\tconst jwt = useRecoilValue(jwtState);\r\n\tconst setSelectedTodo = useSetRecoilState(selectedTodoState);\r\n\r\n\tconst deleteTodoHandler = async (id: string) => {\r\n\t\tconst res = await deleteTodo(jwt, id);\r\n\t\tsetLogs(prev => [res.log, ...prev]);\r\n\r\n\t\tif (res.log.isSuccess) {\r\n\t\t\t// 削除に成功したらリストを更新する\r\n\t\t\tconst res = await getTodos(jwt);\r\n\t\t\tsetTodos(res.data);\r\n\t\t\tsetLogs(prev => [res.log, ...prev]);\r\n\t\t}\r\n\t};\r\n\r\n\tconst selectTodoHandler = (todo: TodoType) => {\r\n\t\tsetSelectedTodo(todo);\r\n\t};\r\n\r\n\t/** Todoの完了状態とタイトルの文字によってアイコンを変更する */\r\n\tconst createIcon = useCallback(\r\n\t\t(title: string, completed: boolean) => {\r\n\t\t\tconst firstChar = title.slice(0, 1);\r\n\t\t\tconst style = completed ? classes.avatarComplete : classes.avatarIncomplete;\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<Avatar aria-label=\"recipe\" className={style}>\r\n\t\t\t\t\t{firstChar}\r\n\t\t\t\t</Avatar>\r\n\t\t\t);\r\n\t\t},\r\n\t\t[classes.avatarComplete, classes.avatarIncomplete]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className={sScrollContainer}>\r\n\t\t\t<div className={sContainer}>\r\n\t\t\t\t{todos.map(todo => (\r\n\t\t\t\t\t<Card key={todo.id} className={classes.cardContainer}>\r\n\t\t\t\t\t\t<CardHeader\r\n\t\t\t\t\t\t\tavatar={\r\n\t\t\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\t\t\tonClick={e => {\r\n\t\t\t\t\t\t\t\t\t\tselectTodoHandler(todo);\r\n\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t{createIcon(todo.title, todo.completed)}\r\n\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\taction={\r\n\t\t\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\t\t\taria-label=\"delete\"\r\n\t\t\t\t\t\t\t\t\tonClick={e => {\r\n\t\t\t\t\t\t\t\t\t\tdeleteTodoHandler(todo.id);\r\n\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t<DeleteIcon />\r\n\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttitle={todo.title}\r\n\t\t\t\t\t\t\tsubheader={new Date(todo.updated_at).toLocaleString()}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<CardContent className={classes.cardcontent}>\r\n\t\t\t\t\t\t\t<Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n\t\t\t\t\t\t\t\t{todo.description}\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</CardContent>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n// ===================================================\r\n// Style\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tcardContainer: {\r\n\t\t\twidth: '340px',\r\n\t\t\tmargin: '0 auto'\r\n\t\t},\r\n\t\tavatarComplete: {\r\n\t\t\tbackgroundColor: theme.palette.primary.main\r\n\t\t},\r\n\t\tavatarIncomplete: {\r\n\t\t\tbackgroundColor: theme.palette.grey[600]\r\n\t\t},\r\n\t\tcardcontent: {\r\n\t\t\tpaddingTop: 0\r\n\t\t}\r\n\t})\r\n);\r\n\r\nconst sContainer = css`\r\n\tdisplay: grid;\r\n\tgrid-template-columns: repeat(auto-fill, minmax(340px, 1fr));\r\n\tgrid-gap: 10px;\r\n\twidth: 100%;\r\n`;\r\n\r\nconst sScrollContainer = css`\r\n\twidth: 100%;\r\n\theight: calc(100vh - 350px);\r\n\toverflow: auto;\r\n\tpadding-right: 5px;\r\n`;\r\n","import React from 'react';\r\nimport { css } from '@emotion/css';\r\nimport { createStyles, Divider, Grid, makeStyles, Theme } from '@material-ui/core';\r\nimport { Controller } from './Controller';\r\nimport { Log } from './Log';\r\nimport { TodoList } from './TodoList';\r\n\r\nexport const Main: React.FC = () => {\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<Grid container className={classes.gridContainer} component=\"main\">\r\n\t\t\t<Grid item className={classes.gridItem} xs={12} sm={5}>\r\n\t\t\t\t<Controller />\r\n\t\t\t</Grid>\r\n\r\n\t\t\t<div className={classes.dividerVContainer}>\r\n\t\t\t\t<Divider className={classes.dividerV} orientation=\"vertical\" />\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className={classes.dividerHContainer}>\r\n\t\t\t\t<Divider className={classes.dividerH} />\r\n\t\t\t</div>\r\n\r\n\t\t\t<Grid item className={classes.gridItem} xs={12} sm={7}>\r\n\t\t\t\t<div className={sRightContainer}>\r\n\t\t\t\t\t<div className={sListContainer}>\r\n\t\t\t\t\t\t<TodoList />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<Divider className={classes.dividerH} />\r\n\t\t\t\t\t<Log />\r\n\t\t\t\t</div>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\n// ===================================================\r\n// Style\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tgridContainer: {\r\n\t\t\twidth: '100%',\r\n\t\t\theight: '100vh'\r\n\t\t},\r\n\t\tgridItem: {\r\n\t\t\tpadding: theme.spacing(3),\r\n\t\t\twidth: '100%'\r\n\t\t},\r\n\t\tdividerVContainer: {\r\n\t\t\tpadding: theme.spacing(2, 0),\r\n\t\t\t[theme.breakpoints.down('sm')]: {\r\n\t\t\t\tdisplay: 'none'\r\n\t\t\t}\r\n\t\t},\r\n\t\tdividerHContainer: {\r\n\t\t\twidth: '100%',\r\n\t\t\tmargin: '-1px 0',\r\n\t\t\tpadding: theme.spacing(0, 2),\r\n\t\t\t[theme.breakpoints.up('sm')]: {\r\n\t\t\t\tdisplay: 'none'\r\n\t\t\t}\r\n\t\t},\r\n\t\tdividerV: {\r\n\t\t\tmargin: '0 -1px',\r\n\t\t\tbackgroundColor: theme.palette.primary.dark\r\n\t\t},\r\n\t\tdividerH: {\r\n\t\t\tmargin: '-1px 0',\r\n\t\t\tpadding: theme.spacing(0, 2),\r\n\t\t\tbackgroundColor: theme.palette.primary.dark\r\n\t\t}\r\n\t})\r\n);\r\n\r\nconst sListContainer = css`\r\n\twidth: 100%;\r\n`;\r\n\r\nconst sRightContainer = css`\r\n\tdisplay: grid;\r\n\tgrid-template-rows: 1fr auto auto;\r\n\tgrid-gap: 20px;\r\n`;\r\n","import React from 'react';\nimport { colors, createTheme, CssBaseline, ThemeProvider } from '@material-ui/core';\nimport { Main } from './Main';\n\nexport const App: React.FC = () => {\n\tconst theme = createTheme({\n\t\tpalette: {\n\t\t\tprimary: {\n\t\t\t\tmain: colors.orange[800]\n\t\t\t},\n\t\t\ttype: 'dark'\n\t\t}\n\t});\n\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<CssBaseline />\n\t\t\t<Main />\n\t\t</ThemeProvider>\n\t);\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { App } from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<RecoilRoot>\n\t\t\t<App />\n\t\t</RecoilRoot>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}